/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: LeafChan (https://sketchfab.com/CuteLeaf)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/cat-dispenser-a48ec772fe3a43b8998836f5fafc4087
Title: Cat dispenser🐱
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { a } from "@react-spring/three";
import { useThree } from "@react-three/fiber";
import { Mesh, Object3D } from "three";

const Structure = ({
  currentFocusPoint,
  isRotating,
  setIsRotating,
  ...props
}: any) => {
  const structureRef = useRef<Mesh | null>(null);
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF("./cat_dispenser.glb");

  const lastX = useRef<number>(0);
  const rotationSpeed = useRef<number>(0);

  const handlePointerDown = (event: PointerEvent) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

    // Calculate the clientX based on the event type
    const clientX = event.clientX;
    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  const handlePointerUp = (event: PointerEvent) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (event: PointerEvent) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      const clientX = event.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
      if (structureRef.current) {
        structureRef.current.rotation.y += delta * 0.01 * Math.PI;
      }
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (event: KeyboardEvent) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(true);
      const rotationDelta = event.key === "ArrowLeft" ? 0.005 : -0.005;
      if (structureRef.current) {
        structureRef.current.rotation.y += rotationDelta * Math.PI;
      }
      rotationSpeed.current = rotationDelta * Math.PI;
    }
  };

  const handleKeyUp = (event: KeyboardEvent) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  function asMesh(object: Object3D): Mesh {
    return object as Mesh;
  }

  return (
    <a.group renderOrder={2} ref={structureRef} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={asMesh(nodes.Object_3).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_4).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_5).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_6).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_7).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_8).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_9).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_10).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_11).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_12).geometry}
          material={materials.aiStandardSurface3SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_13).geometry}
          material={materials.aiStandardSurface1SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_14).geometry}
          material={materials.aiStandardSurface1SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_15).geometry}
          material={materials.aiStandardSurface1SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_16).geometry}
          material={materials.aiStandardSurface1SG}
        />
        <mesh
          geometry={asMesh(nodes.Object_17).geometry}
          material={materials.aiStandardSurface2SG}
        />
      </group>
    </a.group>
  );
};

export default Structure;
